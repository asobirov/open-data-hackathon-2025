// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id String @id @default(cuid())

    title   String
    content String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([title])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Currency {
    id Int @id @default(autoincrement())

    name String
    code String

    trade Trade[]
}

model Category {
    id    Int    @id @default(autoincrement())
    name  String
    deals Deal[]
}

enum CompanyType {
    Budget
    Corporate
}

model Company {
    id Int @id @default(autoincrement())

    inn  String?
    name String?
    type CompanyType?

    dealsAsCustomer Deal[] @relation("CustomerOfDeal")
    dealsAsProvider Deal[] @relation("ProviderOfDeal")

    unsortedData Json?
}

enum ProposalStatus {
    Initiated // Протокол сформирован
    Deleted // Удален со стороны заказчика
}

model Trade {
    id Int @id // trade_id

    displayNo String?

    startCost Float

    // Final deal of a winner provider
    dealId Int?
    deal   Deal? @relation(fields: [dealId], references: [id])

    proposalStatus ProposalStatus

    isLocalManufacturs Boolean

    currency   Currency? @relation(fields: [currencyId], references: [id])
    currencyId Int?

    participantsCount Int

    rn Int?

    files File[]

    unsortedData Json?
}

model Deal {
    id Int @id // deal_id

    cost       Float
    statusName String
    date       DateTime?

    contractDate       DateTime?
    contractStatusName String?

    contractKaznaStatusId   Int?
    contractKaznaStatusName String?

    trade Trade[]

    customerId Int?
    customer   Company? @relation("CustomerOfDeal", fields: [customerId], references: [id])

    providerId Int?
    provider   Company? @relation("ProviderOfDeal", fields: [providerId], references: [id])

    categoryId Int?
    category   Category? @relation(fields: [categoryId], references: [id])

    report String? 
}

model File {
    id Int @id @default(autoincrement())

    type String?

    fileName  String?
    filePath  String?
    fileExt   String?
    fileSizes Int?
    fileDate  DateTime?

    trade   Trade? @relation(fields: [tradeId], references: [id])
    tradeId Int?
}
